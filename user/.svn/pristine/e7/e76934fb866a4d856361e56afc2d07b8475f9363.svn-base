package com.lieying.user;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Stream;

public class Test {
	public static void main(String[] args) throws IOException {
		List<String> list1 = new ArrayList<String>();
		for(int i=0;i<1000000;i++){
			double d = Math.random()*1000;
			list1.add(d+"");
		}
		long start1 = System.currentTimeMillis();//获取系统开始排序的时间点
		int count1= (int) ((Stream) list1.stream().sequential()).sorted().count();
		long end1 = System.currentTimeMillis();//获取系统结束排序的时间点
		long ms1 = (end1-start1);//得到串行排序所用的时间
		System.out.println(ms1+"ms");

		List<String> list = new ArrayList<String>();
		for(int j=0;j<1000000;j++){
			double d = Math.random()*1000;
			list.add(d+"");
		}
		long start = System.currentTimeMillis();//获取系统开始排序的时间点
		int count = (int)((Stream) list.stream().parallel()).sorted().count();
		long end = System.currentTimeMillis();//获取系统结束排序的时间点
		long ms = (end-start);//得到并行排序所用的时间
		System.out.println(ms+"ms");

		File file = new File("D:\\STS");
		String[] files = file.list();

		//		Files.list(new File("D:\\STS").toPath()).forEach(System.out::println);
		//		Files.walk(new File("D:\\STS").toPath(), 0).forEach(System.out::println);
		//		Files.walk(new File("D:\\STS").toPath(), Integer.MAX_VALUE).forEach(System.out::println);
		for(String name:files){
			System.out.println(name);
		}

		TestInterface ti = (Long lon) -> {System.out.println("well cool"); return true;};
		ti.run(new Long(1));


	}

	private List<Long> persons= new ArrayList<Long>();
	public List<Long> getMaleList(TestInterface filter) {
		List<Long> res = new ArrayList<Long>();
		persons.forEach(
				(Long person) -> 
				{
					if (filter.run(person)) {//调用 PersonInterface 的方法
						res.add(person);
					}
				}
				);
		return res;
	}


	private List<Long> persons2= new ArrayList<Long>();
	public List<Long> getMaleList(Predicate<Long> predicate) {
		List<Long> res2 = new ArrayList<Long>();
		persons2.forEach(
				person -> {
					if (predicate.test(person)) {//调用 Predicate 的抽象方法 test
						res2.add(person);
					}
				});
		return res2;
	}
}
